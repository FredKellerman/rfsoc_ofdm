-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_rx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_rx_src_GradientEstimate.vhd
-- Created: 2021-01-08 12:41:57
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_GradientEstimate
-- Source Path: OFDM_Tx_Rx_HW/OFDMRx/PhaseTracking_1/GradientEstimate 
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_GradientEstimate IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataIn_im                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        pilotIn_re                        :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
        pilotIn_im                        :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
        PilotEnd                          :   IN    std_logic;
        dataValid                         :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        gradientOut                       :   OUT   std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_rx_src_GradientEstimate;


ARCHITECTURE rtl OF ofdm_rx_src_GradientEstimate IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_PilotEq
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In1_im                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In2_re                          :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
          In2_im                          :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
          Out1_re                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Out1_im                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Complex_to_Magnitude_Angle_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In_im                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          validIn                         :   IN    std_logic;
          angle                           :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En18
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Gradient
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          diffIn                          :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          diffOut                         :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_MoveAvg
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          mvAvgIn                         :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          mvAvgOut                        :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_PilotEq
    USE ENTITY work.ofdm_rx_src_PilotEq(rtl);

  FOR ALL : ofdm_rx_src_Complex_to_Magnitude_Angle_HDL_Optimized
    USE ENTITY work.ofdm_rx_src_Complex_to_Magnitude_Angle_HDL_Optimized(rtl);

  FOR ALL : ofdm_rx_src_Gradient
    USE ENTITY work.ofdm_rx_src_Gradient(rtl);

  FOR ALL : ofdm_rx_src_MoveAvg
    USE ENTITY work.ofdm_rx_src_MoveAvg(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataIn_im_signed                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay3_reg_re                    : vector_of_signed18(0 TO 19);  -- sfix18_En15 [20]
  SIGNAL Delay3_reg_im                    : vector_of_signed18(0 TO 19);  -- sfix18_En15 [20]
  SIGNAL Delay3_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay3_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL PilotEq_out1_re                  : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL PilotEq_out1_im                  : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Complex_to_Magnitude_Angle_HDL_Optimized_out1 : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Complex_to_Magnitude_Angle_HDL_Optimized_out2 : std_logic;
  SIGNAL Complex_to_Magnitude_Angle_HDL_Optimized_out1_signed : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Data_Type_Conversion_out1        : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Gradient_out1                    : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 43);  -- ufix1 [44]
  SIGNAL Delay4_out1_1                    : std_logic;
  SIGNAL MoveAvg_out1                     : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL MoveAvg_out1_signed              : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Delay7_reg                       : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL Delay7_out1                      : std_logic;

BEGIN
  u_PilotEq : ofdm_rx_src_PilotEq
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              In1_re => dataIn_re,  -- sfix18_En15
              In1_im => dataIn_im,  -- sfix18_En15
              In2_re => pilotIn_re,  -- sfix2
              In2_im => pilotIn_im,  -- sfix2
              Out1_re => PilotEq_out1_re,  -- sfix18_En15
              Out1_im => PilotEq_out1_im  -- sfix18_En15
              );

  u_Complex_to_Magnitude_Angle_HDL_Optimized : ofdm_rx_src_Complex_to_Magnitude_Angle_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              In_re => PilotEq_out1_re,  -- sfix18_En15
              In_im => PilotEq_out1_im,  -- sfix18_En15
              validIn => Constant_out1,
              angle => Complex_to_Magnitude_Angle_HDL_Optimized_out1,  -- sfix21_En18
              validOut => Complex_to_Magnitude_Angle_HDL_Optimized_out2
              );

  u_Gradient : ofdm_rx_src_Gradient
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              diffIn => std_logic_vector(Data_Type_Conversion_out1),  -- sfix23_En20
              diffOut => Gradient_out1  -- sfix23_En20
              );

  u_MoveAvg : ofdm_rx_src_MoveAvg
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              mvAvgIn => Gradient_out1,  -- sfix23_En20
              mvAvgOut => MoveAvg_out1  -- sfix23_En20
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      Delay3_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay3_reg_im(0) <= dataIn_im_signed;
        Delay3_reg_im(1 TO 19) <= Delay3_reg_im(0 TO 18);
        Delay3_reg_re(0) <= dataIn_re_signed;
        Delay3_reg_re(1 TO 19) <= Delay3_reg_re(0 TO 18);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1_re <= Delay3_reg_re(19);
  Delay3_out1_im <= Delay3_reg_im(19);

  dataOut_re <= std_logic_vector(Delay3_out1_re);

  dataOut_im <= std_logic_vector(Delay3_out1_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay1_reg(0) <= PilotEnd;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay_reg(0) <= Delay1_out1;
        Delay_reg(1 TO 13) <= Delay_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(13);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay2_reg(0) <= Delay_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay4_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Constant_out1 <= '1';

  Complex_to_Magnitude_Angle_HDL_Optimized_out1_signed <= signed(Complex_to_Magnitude_Angle_HDL_Optimized_out1);

  Data_Type_Conversion_out1 <= Complex_to_Magnitude_Angle_HDL_Optimized_out1_signed & '0' & '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        delayMatch_reg(0) <= Delay4_out1;
        delayMatch_reg(1 TO 43) <= delayMatch_reg(0 TO 42);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay4_out1_1 <= delayMatch_reg(43);

  MoveAvg_out1_signed <= signed(MoveAvg_out1);

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' AND Delay4_out1_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= MoveAvg_out1_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  gradientOut <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay7_reg(0) <= dataValid;
        Delay7_reg(1 TO 19) <= Delay7_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(19);

  dataValidOut <= Delay7_out1;

END rtl;

