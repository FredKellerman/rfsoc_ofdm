-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_rx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_rx_src_ChanEst.vhd
-- Created: 2021-01-08 12:41:56
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_ChanEst
-- Source Path: OFDM_Tx_Rx_HW/OFDMRx/ChannelEstEq/ChannelEstimate/ChanEst
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_ChanEst IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        ChanEstIn_re                      :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        ChanEstIn_im                      :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        PreambValidIn                     :   IN    std_logic;
        ChEstOut_re                       :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        ChEstOut_im                       :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En14
        );
END ofdm_rx_src_ChanEst;


ARCHITECTURE rtl OF ofdm_rx_src_ChanEst IS

  -- Constants
  CONSTANT InvLLTF_data                   : vector_of_signed16(0 TO 63) := 
    (to_signed(16#0000#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(-16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(-16#0001#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(-16#0001#, 16),
     to_signed(-16#0001#, 16), to_signed(-16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(-16#0001#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(-16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(-16#0001#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(-16#0001#, 16), to_signed(16#0001#, 16), to_signed(-16#0001#, 16),
     to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16), to_signed(16#0001#, 16));  -- sfix16 [64]

  -- Signals
  SIGNAL ChanEstIn_re_signed              : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL ChanEstIn_im_signed              : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Delay4_reg_re                    : vector_of_signed22(0 TO 1);  -- sfix22_En14 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed22(0 TO 1);  -- sfix22_En14 [2]
  SIGNAL Delay4_out1_re                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Delay4_out1_im                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Product_C2ReIm_C2ReIm_A          : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL InvLLTF_k                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL InvLLTF_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL InvLLTF_out1_1                   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- int16
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL InvLLTF_out1_2                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product_mul_temp                 : signed(37 DOWNTO 0);  -- sfix38_En14
  SIGNAL Product_Re                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_Re_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_C2ReIm_C2ReIm_B          : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Product1_mul_temp                : signed(37 DOWNTO 0);  -- sfix38_En14
  SIGNAL Product_Im                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_Im_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Subtract_add_cast                : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Subtract_add_cast_1              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Subtract_add_cast_2              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Subtract_add_cast_3              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Subtract_out1_re                 : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Subtract_out1_im                 : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Gain_cast                        : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL Gain_out                         : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Gain1_cast                       : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL Gain_out_1                       : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay7_out1_re                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay7_out1_im                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL conj_cast                        : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL conj_cast_1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Math_Function_out1_re            : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Math_Function_out1_im            : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay3_out1_re                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay3_out1_im                   : signed(16 DOWNTO 0);  -- sfix17_En14

BEGIN
  -- Store conjugate as this is used in the 
  -- equaliser. 
  -- 
  -- Read out frequency domain LTS 
  -- when preamble valid is HIGH and 
  -- use this to obtain channel estimate. 
  -- 
  -- 1st half
  -- 
  -- 2nd half

  ChanEstIn_re_signed <= signed(ChanEstIn_re);

  ChanEstIn_im_signed <= signed(ChanEstIn_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg_re <= (OTHERS => to_signed(16#000000#, 22));
      Delay4_reg_im <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay4_reg_im(0) <= ChanEstIn_im_signed;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= ChanEstIn_re_signed;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_C2ReIm_A <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Product_C2ReIm_C2ReIm_A <= Delay4_out1_re;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay2_out1 <= PreambValidIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 63
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' AND Delay2_out1 = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#01#, 6);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  InvLLTF_k <= to_unsigned(16#00#, 6) WHEN HDL_Counter_out1 = to_unsigned(16#00#, 6) ELSE
      to_unsigned(16#3F#, 6) WHEN HDL_Counter_out1 = to_unsigned(16#3F#, 6) ELSE
      HDL_Counter_out1;
  InvLLTF_out1 <= InvLLTF_data(to_integer(InvLLTF_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        InvLLTF_out1_1 <= InvLLTF_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        reduced_reg(0) <= InvLLTF_out1_1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  InvLLTF_out1_2 <= reduced_reg(1);

  Product_mul_temp <= Product_C2ReIm_C2ReIm_A * InvLLTF_out1_2;
  Product_Re <= Product_mul_temp(15 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Product_Re_1 <= Product_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_C2ReIm_B <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Product_C2ReIm_C2ReIm_B <= Delay4_out1_im;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Product1_mul_temp <= Product_C2ReIm_C2ReIm_B * InvLLTF_out1_2;
  Product_Im <= Product1_mul_temp(15 DOWNTO 0);

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Product_Im_1 <= Product_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay_reg_im(0) <= Product_Im_1;
        Delay_reg_im(1 TO 63) <= Delay_reg_im(0 TO 62);
        Delay_reg_re(0) <= Product_Re_1;
        Delay_reg_re(1 TO 63) <= Delay_reg_re(0 TO 62);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(63);
  Delay_out1_im <= Delay_reg_im(63);

  Subtract_add_cast <= resize(Delay_out1_re, 17);
  Subtract_add_cast_1 <= resize(Product_Re_1, 17);
  Subtract_out1_re <= Subtract_add_cast + Subtract_add_cast_1;
  Subtract_add_cast_2 <= resize(Delay_out1_im, 17);
  Subtract_add_cast_3 <= resize(Product_Im_1, 17);
  Subtract_out1_im <= Subtract_add_cast_2 + Subtract_add_cast_3;

  Gain_cast <= resize(Subtract_out1_re & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34);
  Gain_out <= Gain_cast(32 DOWNTO 16);

  Gain1_cast <= resize(Subtract_out1_im & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34);
  Gain_out_1 <= Gain1_cast(32 DOWNTO 16);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1_re <= to_signed(16#00000#, 17);
      Delay7_out1_im <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay7_out1_re <= Gain_out;
        Delay7_out1_im <= Gain_out_1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Math_Function_out1_re <= Delay7_out1_re;
  conj_cast <= resize(Delay7_out1_im, 18);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function_out1_im <= "01111111111111111" WHEN (conj_cast_1(17) = '0') AND (conj_cast_1(16) /= '0') ELSE
      "10000000000000000" WHEN (conj_cast_1(17) = '1') AND (conj_cast_1(16) /= '1') ELSE
      conj_cast_1(16 DOWNTO 0);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#00000#, 17);
      Delay3_out1_im <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Delay3_out1_re <= Math_Function_out1_re;
        Delay3_out1_im <= Math_Function_out1_im;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  ChEstOut_re <= std_logic_vector(Delay3_out1_re);

  ChEstOut_im <= std_logic_vector(Delay3_out1_im);

END rtl;

