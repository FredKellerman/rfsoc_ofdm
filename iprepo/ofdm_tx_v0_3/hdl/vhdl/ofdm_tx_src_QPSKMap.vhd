-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_tx_src_QPSKMap.vhd
-- Created: 2021-01-13 12:31:57
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_QPSKMap
-- Source Path: OFDM_Tx_Rx_HW/OFDMTx/DataGenerator/SymbolsGen/QPSKMap
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_QPSKMap IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        ints                              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        validIn                           :   IN    std_logic;
        QPSKOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        QPSKOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END ofdm_tx_src_QPSKMap;


ARCHITECTURE rtl OF ofdm_tx_src_QPSKMap IS

  -- Signals
  SIGNAL Constant4_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant4_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ints_unsigned                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant2_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant2_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant3_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant3_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_re         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_im         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_re_1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_im_1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  Constant4_out1_re <= to_signed(16#0000#, 16);
  Constant4_out1_im <= to_signed(16#0000#, 16);

  ints_unsigned <= unsigned(ints);

  Constant_out1_re <= to_signed(16#2D41#, 16);
  Constant_out1_im <= to_signed(16#2D41#, 16);

  Constant1_out1_re <= to_signed(16#2D41#, 16);
  Constant1_out1_im <= to_signed(-16#2D41#, 16);

  Constant2_out1_re <= to_signed(-16#2D41#, 16);
  Constant2_out1_im <= to_signed(16#2D41#, 16);

  Constant3_out1_re <= to_signed(-16#2D41#, 16);
  Constant3_out1_im <= to_signed(-16#2D41#, 16);

  
  Multiport_Switch_out1_re <= Constant_out1_re WHEN ints_unsigned = to_unsigned(16#0#, 2) ELSE
      Constant1_out1_re WHEN ints_unsigned = to_unsigned(16#1#, 2) ELSE
      Constant2_out1_re WHEN ints_unsigned = to_unsigned(16#2#, 2) ELSE
      Constant3_out1_re;
  
  Multiport_Switch_out1_im <= Constant_out1_im WHEN ints_unsigned = to_unsigned(16#0#, 2) ELSE
      Constant1_out1_im WHEN ints_unsigned = to_unsigned(16#1#, 2) ELSE
      Constant2_out1_im WHEN ints_unsigned = to_unsigned(16#2#, 2) ELSE
      Constant3_out1_im;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiport_Switch_out1_re_1 <= to_signed(16#0000#, 16);
      Multiport_Switch_out1_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        Multiport_Switch_out1_re_1 <= Multiport_Switch_out1_re;
        Multiport_Switch_out1_im_1 <= Multiport_Switch_out1_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch_out1_re <= Constant4_out1_re WHEN validIn = '0' ELSE
      Multiport_Switch_out1_re_1;
  
  Switch_out1_im <= Constant4_out1_im WHEN validIn = '0' ELSE
      Multiport_Switch_out1_im_1;

  QPSKOut_re <= std_logic_vector(Switch_out1_re);

  QPSKOut_im <= std_logic_vector(Switch_out1_im);

END rtl;

