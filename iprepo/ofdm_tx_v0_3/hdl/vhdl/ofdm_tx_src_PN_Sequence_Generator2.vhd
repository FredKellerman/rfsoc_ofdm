-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_tx_src_PN_Sequence_Generator2.vhd
-- Created: 2021-01-13 12:31:57
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_PN_Sequence_Generator2
-- Source Path: OFDM_Tx_Rx_HW/OFDMTx/DataGenerator/SymbolsGen/DataGenQPSK/PN Sequence Generator2
-- Hierarchy Level: 4
-- 
-- PN Sequence Generator
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_PN_Sequence_Generator2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        PN_Sequence                       :   OUT   std_logic
        );
END ofdm_tx_src_PN_Sequence_Generator2;


ARCHITECTURE rtl OF ofdm_tx_src_PN_Sequence_Generator2 IS

  -- Constants
  CONSTANT VectorTDL_data                 : std_logic_vector(0 TO 5) := 
    ('0', '0', '0', '0', '1', '1');  -- ufix1 [6]

  -- Signals
  SIGNAL Reset_1                          : std_logic;
  SIGNAL InitStates                       : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL TDL                              : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL TDL_5                            : std_logic;
  SIGNAL TDL_4                            : std_logic;
  SIGNAL PNSeqOut                         : std_logic;
  SIGNAL TDL_1                            : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL TDLPrevious                      : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL OutputMask                       : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL MaskANDtoXOR                     : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0                   : std_logic;
  SIGNAL MaskANDtoXOR_1                   : std_logic;
  SIGNAL MaskANDtoXOR_2                   : std_logic;
  SIGNAL MaskANDtoXOR_3                   : std_logic;
  SIGNAL MaskANDtoXOR_4                   : std_logic;
  SIGNAL MaskANDtoXOR_5                   : std_logic;
  SIGNAL PNSeqBits                        : std_logic;

BEGIN
  Reset_1 <= '0';

  InitStates(0) <= '0';
  InitStates(1) <= '0';
  InitStates(2) <= '0';
  InitStates(3) <= '0';
  InitStates(4) <= '1';
  InitStates(5) <= '1';

  TDL_5 <= TDL(5);

  TDL_4 <= TDL(4);

  PNSeqOut <= TDL_4 XOR TDL_5;

  TDL_1(0) <= PNSeqOut;
  TDL_1(1) <= TDL(0);
  TDL_1(2) <= TDL(1);
  TDL_1(3) <= TDL(2);
  TDL_1(4) <= TDL(3);
  TDL_1(5) <= TDL(4);

  VectorTDL_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      TDLPrevious <= VectorTDL_data;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        TDLPrevious <= TDL_1;
      END IF;
    END IF;
  END PROCESS VectorTDL_process;


  
  TDL <= TDLPrevious WHEN Reset_1 = '0' ELSE
      InitStates;

  OutputMask(0) <= '0';
  OutputMask(1) <= '0';
  OutputMask(2) <= '0';
  OutputMask(3) <= '0';
  OutputMask(4) <= '0';
  OutputMask(5) <= '1';


  MaskANDtoXOR_gen: FOR t_0 IN 0 TO 5 GENERATE
    MaskANDtoXOR(t_0) <= TDL(t_0) AND OutputMask(t_0);
  END GENERATE MaskANDtoXOR_gen;


  MaskANDtoXOR_0 <= MaskANDtoXOR(0);

  MaskANDtoXOR_1 <= MaskANDtoXOR(1);

  MaskANDtoXOR_2 <= MaskANDtoXOR(2);

  MaskANDtoXOR_3 <= MaskANDtoXOR(3);

  MaskANDtoXOR_4 <= MaskANDtoXOR(4);

  MaskANDtoXOR_5 <= MaskANDtoXOR(5);

  PNSeqBits <= MaskANDtoXOR_5 XOR (MaskANDtoXOR_4 XOR (MaskANDtoXOR_3 XOR (MaskANDtoXOR_2 XOR (MaskANDtoXOR_0 XOR MaskANDtoXOR_1))));

  
  PN_Sequence <= '1' WHEN PNSeqBits /= '0' ELSE
      '0';

END rtl;

