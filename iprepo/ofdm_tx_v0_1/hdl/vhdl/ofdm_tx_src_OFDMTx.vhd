-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_tx_src_OFDMTx.vhd
-- Created: 2021-01-08 12:14:22
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 5.20833e-09
-- Target subsystem base rate: 1e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_re_tdata               ce_out        1e-06
-- m_axis_im_tdata               ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_OFDMTx
-- Source Path: OFDM_Tx_Rx_HW/OFDMTx
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_OFDMTx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        modScheme                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        ce_out                            :   OUT   std_logic;
        m_axis_re_tdata                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        m_axis_im_tdata                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END ofdm_tx_src_OFDMTx;


ARCHITECTURE rtl OF ofdm_tx_src_OFDMTx IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_ControlSignalGenerator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          enable                          :   IN    std_logic;
          dataValid                       :   OUT   std_logic;
          preambleValid                   :   OUT   std_logic;
          dataReady                       :   OUT   std_logic;
          PilotValid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_DataGenerator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          modScheme                       :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          dataValid                       :   IN    std_logic;
          preambleValid                   :   IN    std_logic;
          dataReady                       :   IN    std_logic;
          pilotValid                      :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValOut                    :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_SCMapper
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValid                     :   IN    std_logic;
          dataValid                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValidOut                  :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_IFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambleValidIn                 :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValidOut                  :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_CPAdd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValid                     :   IN    std_logic;
          dataValid                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_ControlSignalGenerator
    USE ENTITY work.ofdm_tx_src_ControlSignalGenerator(rtl);

  FOR ALL : ofdm_tx_src_DataGenerator
    USE ENTITY work.ofdm_tx_src_DataGenerator(rtl);

  FOR ALL : ofdm_tx_src_SCMapper
    USE ENTITY work.ofdm_tx_src_SCMapper(rtl);

  FOR ALL : ofdm_tx_src_IFFT
    USE ENTITY work.ofdm_tx_src_IFFT(rtl);

  FOR ALL : ofdm_tx_src_CPAdd
    USE ENTITY work.ofdm_tx_src_CPAdd(rtl);

  -- Signals
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL ControlSignalGenerator_out1      : std_logic;
  SIGNAL ControlSignalGenerator_out2      : std_logic;
  SIGNAL ControlSignalGenerator_out3      : std_logic;
  SIGNAL ControlSignalGenerator_out4      : std_logic;
  SIGNAL data_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DataGenerator_out2               : std_logic;
  SIGNAL DataGenerator_out3               : std_logic;
  SIGNAL dataOut_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SCMapper_out2                    : std_logic;
  SIGNAL SCMapper_out3                    : std_logic;
  SIGNAL IFFT_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_out2                        : std_logic;
  SIGNAL IFFT_out3                        : std_logic;
  SIGNAL dataOut_re_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  -- Generate random integers, M-QAM symbol mapping and sub-carrier 
  -- mapping. 
  -- 
  -- Add Cyclic Prefix 
  -- 
  -- Create OFDM symbols using 
  -- IFFT

  u_ControlSignalGenerator : ofdm_tx_src_ControlSignalGenerator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => clk_enable,
              enable => Constant_out1,
              dataValid => ControlSignalGenerator_out1,
              preambleValid => ControlSignalGenerator_out2,
              dataReady => ControlSignalGenerator_out3,
              PilotValid => ControlSignalGenerator_out4
              );

  u_DataGenerator : ofdm_tx_src_DataGenerator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => clk_enable,
              modScheme => modScheme,  -- ufix2
              dataValid => ControlSignalGenerator_out1,
              preambleValid => ControlSignalGenerator_out2,
              dataReady => ControlSignalGenerator_out3,
              pilotValid => ControlSignalGenerator_out4,
              dataOut_re => data_re,  -- sfix16_En14
              dataOut_im => data_im,  -- sfix16_En14
              preambValOut => DataGenerator_out2,
              dataValidOut => DataGenerator_out3
              );

  u_SCMapper : ofdm_tx_src_SCMapper
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => clk_enable,
              dataIn_re => data_re,  -- sfix16_En14
              dataIn_im => data_im,  -- sfix16_En14
              preambValid => DataGenerator_out2,
              dataValid => DataGenerator_out3,
              dataOut_re => dataOut_re,  -- sfix16_En14
              dataOut_im => dataOut_im,  -- sfix16_En14
              preambValidOut => SCMapper_out2,
              dataValidOut => SCMapper_out3
              );

  u_IFFT : ofdm_tx_src_IFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => clk_enable,
              dataIn_re => dataOut_re,  -- sfix16_En14
              dataIn_im => dataOut_im,  -- sfix16_En14
              preambleValidIn => SCMapper_out2,
              dataValidIn => SCMapper_out3,
              dataOut_re => IFFT_out1_re,  -- sfix16_En14
              dataOut_im => IFFT_out1_im,  -- sfix16_En14
              preambValidOut => IFFT_out2,
              dataValidOut => IFFT_out3
              );

  u_CPAdd : ofdm_tx_src_CPAdd
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => clk_enable,
              dataIn_re => IFFT_out1_re,  -- sfix16_En14
              dataIn_im => IFFT_out1_im,  -- sfix16_En14
              preambValid => IFFT_out2,
              dataValid => IFFT_out3,
              dataOut_re => dataOut_re_1,  -- sfix16_En14
              dataOut_im => dataOut_im_1  -- sfix16_En14
              );

  Constant_out1 <= '1';

  ce_out <= clk_enable;

  m_axis_re_tdata <= dataOut_re_1;

  m_axis_im_tdata <= dataOut_im_1;

END rtl;

