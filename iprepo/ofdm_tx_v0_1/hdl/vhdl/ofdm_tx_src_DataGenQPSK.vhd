-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_tx_src_DataGenQPSK.vhd
-- Created: 2021-01-08 12:14:22
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_DataGenQPSK
-- Source Path: OFDM_Tx_Rx_HW/OFDMTx/DataGenerator/SymbolsGen/DataGenQPSK
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_DataGenQPSK IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        y                                 :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END ofdm_tx_src_DataGenQPSK;


ARCHITECTURE rtl OF ofdm_tx_src_DataGenQPSK IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_PN_Sequence_Generator1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_PN_Sequence_Generator2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_PN_Sequence_Generator1
    USE ENTITY work.ofdm_tx_src_PN_Sequence_Generator1(rtl);

  FOR ALL : ofdm_tx_src_PN_Sequence_Generator2
    USE ENTITY work.ofdm_tx_src_PN_Sequence_Generator2(rtl);

  -- Signals
  SIGNAL PN_Sequence_Generator1_out1      : std_logic;
  SIGNAL PN_Sequence_Generator2_out1      : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  u_PN_Sequence_Generator1 : ofdm_tx_src_PN_Sequence_Generator1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              PN_Sequence => PN_Sequence_Generator1_out1
              );

  u_PN_Sequence_Generator2 : ofdm_tx_src_PN_Sequence_Generator2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              PN_Sequence => PN_Sequence_Generator2_out1
              );

  Bit_Concat_out1 <= unsigned'(PN_Sequence_Generator1_out1 & PN_Sequence_Generator2_out1);

  y <= std_logic_vector(Bit_Concat_out1);

END rtl;

