-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_HW\ofdm_tx_src_DataGenerator.vhd
-- Created: 2021-01-12 13:19:19
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_DataGenerator
-- Source Path: OFDM_Tx_Rx_HW/OFDMTx/DataGenerator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_tx_src_OFDMTx_pkg.ALL;

ENTITY ofdm_tx_src_DataGenerator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        enb_1_192_1                       :   IN    std_logic;
        enb_1_192_0                       :   IN    std_logic;
        modScheme                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        dataValid                         :   IN    std_logic;
        preambleValid                     :   IN    std_logic;
        dataReady                         :   IN    std_logic;
        pilotValid                        :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambValOut                      :   OUT   std_logic;
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_tx_src_DataGenerator;


ARCHITECTURE rtl OF ofdm_tx_src_DataGenerator IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_SymbolsGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          modScheme                       :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          valid                           :   IN    std_logic;
          symbsOut_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          symbsOut_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_PilotGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_192_1                     :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          pilotValidIn                    :   IN    std_logic;
          pilotOut_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pilotOut_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_STSFreq
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_192_1                     :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          preamVal                        :   IN    std_logic;
          stsFreq_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsFreq_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsVal                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_LTSfreq
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_192_1                     :   IN    std_logic;
          enb_1_192_0                     :   IN    std_logic;
          preambVal                       :   IN    std_logic;
          ltsFreq                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ltsVal                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_Data_Multiplexer
    PORT( symbols_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          symbols_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataready                       :   IN    std_logic;
          pilots_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pilots_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pval                            :   IN    std_logic;
          sts_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          sts_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsval                          :   IN    std_logic;
          lts                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ltsval                          :   IN    std_logic;
          data_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_SymbolsGen
    USE ENTITY work.ofdm_tx_src_SymbolsGen(rtl);

  FOR ALL : ofdm_tx_src_PilotGen
    USE ENTITY work.ofdm_tx_src_PilotGen(rtl);

  FOR ALL : ofdm_tx_src_STSFreq
    USE ENTITY work.ofdm_tx_src_STSFreq(rtl);

  FOR ALL : ofdm_tx_src_LTSfreq
    USE ENTITY work.ofdm_tx_src_LTSfreq(rtl);

  FOR ALL : ofdm_tx_src_Data_Multiplexer
    USE ENTITY work.ofdm_tx_src_Data_Multiplexer(rtl);

  -- Signals
  SIGNAL modScheme_1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL modScheme_2                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Multiport_Switch_bypass_reg      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL modScheme_3                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dataReady_1                      : std_logic;
  SIGNAL dataReady_2                      : std_logic;
  SIGNAL Switch_bypass_reg                : std_logic;  -- ufix1
  SIGNAL dataReady_3                      : std_logic;
  SIGNAL SymbolsGen_out1_re               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SymbolsGen_out1_im               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SymbolsGen_out1_re_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SymbolsGen_out1_im_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 21);  -- ufix1 [22]
  SIGNAL dataReady_4                      : std_logic;
  SIGNAL dataValid_1                      : std_logic;
  SIGNAL pilotValid_1                     : std_logic;
  SIGNAL pilotValid_2                     : std_logic;
  SIGNAL PilotGen_out1_re                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL PilotGen_out1_im                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL PilotGen_out1_re_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL PilotGen_out1_im_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch1_reg_re               : vector_of_signed16(0 TO 9);  -- sfix16_En14 [10]
  SIGNAL delayMatch1_reg_im               : vector_of_signed16(0 TO 9);  -- sfix16_En14 [10]
  SIGNAL PilotGen_out1_re_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL PilotGen_out1_im_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 21);  -- ufix1 [22]
  SIGNAL pilotValid_3                     : std_logic;
  SIGNAL preambleValid_1                  : std_logic;
  SIGNAL STSFreq_out1_re                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL STSFreq_out1_im                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL STSFreq_out2                     : std_logic;
  SIGNAL STSFreq_out1_re_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL STSFreq_out1_im_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch3_reg_re               : vector_of_signed16(0 TO 9);  -- sfix16_En14 [10]
  SIGNAL delayMatch3_reg_im               : vector_of_signed16(0 TO 9);  -- sfix16_En14 [10]
  SIGNAL STSFreq_out1_re_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL STSFreq_out1_im_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL LTSfreq_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL LTSfreq_out2                     : std_logic;
  SIGNAL LTSfreq_out1_signed              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL STSFreq_out2_1                   : std_logic;
  SIGNAL delayMatch5_reg                  : vector_of_signed16(0 TO 9);  -- sfix16 [10]
  SIGNAL LTSfreq_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL LTSfreq_out2_1                   : std_logic;
  SIGNAL data_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_re_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL preambleValid_2                  : std_logic;
  SIGNAL dataValid_2                      : std_logic;

BEGIN
  u_SymbolsGen : ofdm_tx_src_SymbolsGen
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_192_0 => enb_1_192_0,
              modScheme => std_logic_vector(modScheme_3),  -- ufix2
              valid => dataReady_3,
              symbsOut_re => SymbolsGen_out1_re,  -- sfix16_En14
              symbsOut_im => SymbolsGen_out1_im  -- sfix16_En14
              );

  u_PilotGen : ofdm_tx_src_PilotGen
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_192_1 => enb_1_192_1,
              enb_1_192_0 => enb_1_192_0,
              dataValidIn => dataValid_1,
              pilotValidIn => pilotValid_2,
              pilotOut_re => PilotGen_out1_re,  -- sfix16_En14
              pilotOut_im => PilotGen_out1_im  -- sfix16_En14
              );

  u_STSFreq : ofdm_tx_src_STSFreq
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_192_1 => enb_1_192_1,
              enb_1_192_0 => enb_1_192_0,
              preamVal => preambleValid_1,
              stsFreq_re => STSFreq_out1_re,  -- sfix16_En14
              stsFreq_im => STSFreq_out1_im,  -- sfix16_En14
              stsVal => STSFreq_out2
              );

  u_LTSfreq : ofdm_tx_src_LTSfreq
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_192_1 => enb_1_192_1,
              enb_1_192_0 => enb_1_192_0,
              preambVal => preambleValid_1,
              ltsFreq => LTSfreq_out1,  -- sfix16_En14
              ltsVal => LTSfreq_out2
              );

  u_Data_Multiplexer : ofdm_tx_src_Data_Multiplexer
    PORT MAP( symbols_re => SymbolsGen_out1_re_1,  -- sfix16_En14
              symbols_im => SymbolsGen_out1_im_1,  -- sfix16_En14
              dataready => dataReady_4,
              pilots_re => std_logic_vector(PilotGen_out1_re_1),  -- sfix16_En14
              pilots_im => std_logic_vector(PilotGen_out1_im_1),  -- sfix16_En14
              pval => pilotValid_3,
              sts_re => std_logic_vector(STSFreq_out1_re_1),  -- sfix16_En14
              sts_im => std_logic_vector(STSFreq_out1_im_1),  -- sfix16_En14
              stsval => STSFreq_out2_1,
              lts => std_logic_vector(LTSfreq_out1_1),  -- sfix16_En14
              ltsval => LTSfreq_out2_1,
              data_re => data_re,  -- sfix16_En14
              data_im => data_im  -- sfix16_En14
              );

  modScheme_1 <= unsigned(modScheme);

  in_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      modScheme_2 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        modScheme_2 <= modScheme_1;
      END IF;
    END IF;
  END PROCESS in_0_pipe_in_pipe_process;


  Multiport_Switch_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiport_Switch_bypass_reg <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_1 = '1' THEN
        Multiport_Switch_bypass_reg <= modScheme_2;
      END IF;
    END IF;
  END PROCESS Multiport_Switch_bypass_process;

  
  modScheme_3 <= modScheme_2 WHEN enb_1_192_1 = '1' ELSE
      Multiport_Switch_bypass_reg;

  dataReady_1 <= dataReady;

  in_3_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataReady_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        dataReady_2 <= dataReady_1;
      END IF;
    END IF;
  END PROCESS in_3_pipe_in_pipe_process;


  Switch_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_1 = '1' THEN
        Switch_bypass_reg <= dataReady_2;
      END IF;
    END IF;
  END PROCESS Switch_bypass_process;

  
  dataReady_3 <= dataReady_2 WHEN enb_1_192_1 = '1' ELSE
      Switch_bypass_reg;

  SymbolsGen_out1_re_1 <= std_logic_vector(signed(SymbolsGen_out1_re));

  SymbolsGen_out1_im_1 <= std_logic_vector(signed(SymbolsGen_out1_im));

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch_reg(0) <= dataReady_2;
        delayMatch_reg(1 TO 21) <= delayMatch_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  dataReady_4 <= delayMatch_reg(21);

  in_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        dataValid_1 <= dataValid;
      END IF;
    END IF;
  END PROCESS in_1_pipe_in_pipe_process;


  pilotValid_1 <= pilotValid;

  in_4_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pilotValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        pilotValid_2 <= pilotValid_1;
      END IF;
    END IF;
  END PROCESS in_4_pipe_in_pipe_process;


  PilotGen_out1_re_signed <= signed(PilotGen_out1_re);

  PilotGen_out1_im_signed <= signed(PilotGen_out1_im);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      delayMatch1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch1_reg_im(0) <= PilotGen_out1_im_signed;
        delayMatch1_reg_im(1 TO 9) <= delayMatch1_reg_im(0 TO 8);
        delayMatch1_reg_re(0) <= PilotGen_out1_re_signed;
        delayMatch1_reg_re(1 TO 9) <= delayMatch1_reg_re(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  PilotGen_out1_re_1 <= delayMatch1_reg_re(9);
  PilotGen_out1_im_1 <= delayMatch1_reg_im(9);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch2_reg(0) <= pilotValid_2;
        delayMatch2_reg(1 TO 21) <= delayMatch2_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  pilotValid_3 <= delayMatch2_reg(21);

  in_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        preambleValid_1 <= preambleValid;
      END IF;
    END IF;
  END PROCESS in_2_pipe_in_pipe_process;


  STSFreq_out1_re_signed <= signed(STSFreq_out1_re);

  STSFreq_out1_im_signed <= signed(STSFreq_out1_im);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      delayMatch3_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch3_reg_im(0) <= STSFreq_out1_im_signed;
        delayMatch3_reg_im(1 TO 9) <= delayMatch3_reg_im(0 TO 8);
        delayMatch3_reg_re(0) <= STSFreq_out1_re_signed;
        delayMatch3_reg_re(1 TO 9) <= delayMatch3_reg_re(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  STSFreq_out1_re_1 <= delayMatch3_reg_re(9);
  STSFreq_out1_im_1 <= delayMatch3_reg_im(9);

  LTSfreq_out1_signed <= signed(LTSfreq_out1);

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch4_reg(0) <= STSFreq_out2;
        delayMatch4_reg(1 TO 10) <= delayMatch4_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  STSFreq_out2_1 <= delayMatch4_reg(10);

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch5_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch5_reg(0) <= LTSfreq_out1_signed;
        delayMatch5_reg(1 TO 9) <= delayMatch5_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  LTSfreq_out1_1 <= delayMatch5_reg(9);

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch6_reg(0) <= LTSfreq_out2;
        delayMatch6_reg(1 TO 10) <= delayMatch6_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  LTSfreq_out2_1 <= delayMatch6_reg(10);

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  out_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_re_1 <= to_signed(16#0000#, 16);
      data_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        data_re_1 <= data_re_signed;
        data_im_1 <= data_im_signed;
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;


  dataOut_re <= std_logic_vector(data_re_1);

  dataOut_im <= std_logic_vector(data_im_1);

  out_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        preambleValid_2 <= preambleValid_1;
      END IF;
    END IF;
  END PROCESS out_1_pipe_in_pipe_process;


  out_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_192_0 = '1' THEN
        dataValid_2 <= dataValid_1;
      END IF;
    END IF;
  END PROCESS out_2_pipe_in_pipe_process;


  preambValOut <= preambleValid_2;

  dataValidOut <= dataValid_2;

END rtl;

